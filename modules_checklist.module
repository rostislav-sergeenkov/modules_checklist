<?php

/**
 * @file
 * modules_checklist.module.
 */

// @todo ==== RELEASE 7x-1.1. Focus on functionality.
// -- major functionality --
// @todo add variable 'modules_checklist_required_modules'.
// @todo print drupal_set_message() on all pages of the site if the list modules doesn't match the config.
// @todo test log entry when using Drush.
// @todo implement periodic check of systems table to ensure that entry for the manually enabled in DB modules is present in the log. Check if this logic works.
// @todo implement protection: write into watchdog and variable on disabling the module, extract data from watchdog and variable on enabling.

// -- sub-module --
// @todo fix filters by Date.
// @todo highlight rows in the table according to the priority of modules (required, optional etc).
// @todo the best practice is to go through and add t() to all title and label strings, with the exception of menu strings.

// -- admin UI --
// @todo create textarea where user can just copy the array of modules and insert it in settings.php. Use format machine name - human name.
// @todo add link to that file on the status report page. Also display a diff with existing modules there.
// @todo module can be: installed, enabled, disabled, uninstalled, physically removed. Test all 5 situations.

// -- release action items ---
// @todo update README.txt file
// @todo implement hook_help() for both modules.
// @todo think how to specify correct version for the sub-module.
// @todo create Project Page and promote the module to the permanent d.org project.
// @todo demonstrate the module and collect feedback.
// @todo install the module on Prod sites.

// @todo ==== RELEASE 7x-1.0. Focus on code quality (Views handlers instead of hook_alter, etc).
// @todo create views field handlers for Module Names and Type (Status). instead of altering for Views fields.
// @todo output Available modules as table, add check all checkbox.

/**
 * Implements hook_help().
 */
function modules_checklist_help($path, $arg) {

}

/**
 * Implements hook_permission().
 */
function modules_checklist_permission() {
  return array(
    'configure modules_checklist settings' => array(
      'title' => t('Configure Modules Checklist settings'),
      'description' => t('Access and configure Modules Checklist settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function modules_checklist_menu() {
  return array(
    'admin/config/development/modules_checklist_settings' => array(
      'title' => 'Modules Checklist settings',
      'description' => 'Modules Checklist settings and configuration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('modules_checklist_settings_form'),
      'access arguments' => array('configure modules_checklist settings'),
      'file' => 'modules_checklist.admin.inc',
    )
  );
}

/**
 * Returns array of missing required modules and enabled extra modules.
 *
 * Compares enabled modules with the predefined list of modules.
 *
 * @return array
 */
function modules_checklist_get_modules_status() {
  $status = array(
    'optional_modules' => array(),
    'missing_modules' => array(),
    'error_message' => '',
  );

  $required_modules = modules_checklist_get_modules('required');
  $enabled_modules = modules_checklist_get_modules('enabled');
  $config_path = conf_path() . '/settings.php';

  if (empty($required_modules)) {
    $status['error_message'] = t('Please add the list of required modules in !file.',
      array('!file' => $config_path));

    return $status;
  }

  // @todo update logic for optional modules.
  $status['optional_modules'] = array_diff($enabled_modules, $required_modules);
  $status['missing_modules'] = array_diff($required_modules, $enabled_modules);

  return $status;
}

/**
 * Returns array of names of the modules.
 *
 * @param array $modules
 *
 * @return array
 */
function modules_checklist_get_module_names($modules) {
  $module_names = array();
  $modules_data = system_rebuild_module_data();

  foreach ($modules as $module_machine_name) {
    if (isset($modules_data[$module_machine_name]->info['name'])) {
      $module_names[$module_machine_name] = $modules_data[$module_machine_name]->info['name'];
    }
    else {
      $module_names[$module_machine_name] = modules_checklist_get_uninstalled_and_deleted_label($module_machine_name);
    }
  }

  return $module_names;
}

/**
 * Returns array of human readable names of modules according to their status.
 *
 * @param string $status
 * @todo document possible $type
 *
 * @return array|null
 */
function modules_checklist_get_modules($status) {
  switch ($status) {
    case 'enabled':
      $modules = array_keys(module_list());
      break;
    case 'required':
      $modules = variable_get('modules_checklist_required_modules', array());
      break;
      // @todo implement logic for optional modules.
    case 'optional':
      $modules = variable_get('modules_checklist_optional_modules', array());
      break;
    default:
      $modules = array();
  }

  if (!empty($modules)) {
    sort($modules);

    return modules_checklist_get_module_names($modules);
  }

  return $modules;
}

/**
 * Returns label for the module that has been uninstalled and deleted from the system.
 *
 * @param string $module_machine_name
 *
 * @return string
 */
function modules_checklist_get_uninstalled_and_deleted_label($module_machine_name) {
  return $module_machine_name . ' [' . t('uninstalled and deleted') . ']';
}
