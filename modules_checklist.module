<?php

/**
 * @file
 * File modules_checklist.module.
 */

// Defines text on the "Generate" button.
define('MODULES_CHECKLIST_GENERATE_BUTTON_TEXT', 'Generate $conf variables');

/**
 * Implements hook_help().
 */
function modules_checklist_help($path, $arg) {
  if ($path == 'admin/help#modules_checklist') {
    $output = '<p>' . t('The !module provides and maintains control over enabled and disabled modules of the project.',
        array('!module' => '<strong>' . t('Modules Checklist') . '</strong>')) . '</p>';
    $output .= '<p>' . t('Initially it was written for a long-term Drupal project to control and monitor hundreds of enabled modules on multiple environments (DEV, QA, Stage, Prod etc) during development.') . '</p>';
    $output .= '<p>' . t('Modules Checklist compares enabled modules with defined in settings.php lists of required and optional modules and warns site administrator (on the !status_page and by email) in case of any discrepancy.',
        array('!status_page' => l(t('Status report page'), 'admin/reports/status'))) . '</p>';
    $output .= '<p>' . t('It also warns if user is trying to disable required module or enable the module which should be disabled.') . '</p>';
    $output .= '<p>' . t('See "How to set up the module" section of the !configuration_page for the detailed step by step instructions (requires "Configure Modules Checklist settings" permission).',
        array('!configuration_page' => l(t('configuration page'), 'admin/config/development/modules_checklist_settings'))) . '</p>';
    $output .= '<p>' . t('Use "Configuration helper" to generate $conf variables.') . '</p>';

    return $output;
  }
}

/**
 * Implements hook_theme().
 */
function modules_checklist_theme() {
  return array(
    'modules_checklist_table' => array(
      'render element' => 'form',
      'file' => 'modules_checklist.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function modules_checklist_permission() {
  return array(
    'configure modules_checklist settings' => array(
      'title' => t('Configure Modules Checklist settings'),
      'description' => t('Access and configure Modules Checklist settings.'),
      'warning' => t('Warning: Give to trusted roles only; this permission has security implications.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function modules_checklist_menu() {
  return array(
    'admin/config/development/modules_checklist_settings' => array(
      'title' => 'Modules Checklist settings',
      'description' => 'Modules Checklist settings and configuration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('modules_checklist_settings_form'),
      'access arguments' => array('configure modules_checklist settings'),
      'file' => 'modules_checklist.admin.inc',
    )
  );
}

/**
 * Implements hook_token_info().
 */
function modules_checklist_token_info() {
  return array(
    'tokens' => array(
      'modules_checklist' => array(
        'modules' => array(
          'name' => t('List of modules'),
          'description' => t('Returns the list of modules (installed, enabled etc).'),
        ),
        'config_url' => array(
          'name' => t('URL of the configuration page'),
          'description' => t('URL of "Module Checklist" configuration page.'),
        ),
        'action' => array(
          'name' => t('Action on a module'),
          'description' => t('Returns the name of the action on a module (installed, enabled etc).'),
        ),
        'modules_checklist_date' => array(
          'name' => t('Date of the event'),
          'description' => t('Returns date of the event in the format defined by "Modules Checklist".'),
        ),
        'ip_address' => array(
          'name' => t('IP address'),
          'description' => t('IP address of the current user.'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function modules_checklist_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'modules_checklist') {
    foreach ($tokens as $name => $original) {
      if ($name == 'modules') {
        if (!empty($data['modules_checklist']['modules'])) {
          $replacements[$original] = $data['modules_checklist']['modules'];
        }
        else {
          $replacements[$original] = '';
        }
      }
      elseif ($name == 'action') {
        if (!empty($data['modules_checklist']['action'])) {
          $replacements[$original] = $data['modules_checklist']['action'];
        }
        else {
          $replacements[$original] = '';
        }
      }
      elseif ($name == 'config_url') {
        $replacements[$original] = url('admin/config/development/modules_checklist_settings',
          array('absolute' => TRUE));
      }
      elseif ($name == 'ip_address') {
        global $user;
        $replacements[$original] = $user->hostname;
      }
      elseif ($name == 'modules_checklist_date') {
        $replacements[$original] = date('m/d/Y H:i', REQUEST_TIME);
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_modules_installed().
 */
function modules_checklist_modules_installed($modules) {
  modules_checklist_notify($modules, 'installed');
}

/**
 * Implements hook_modules_enabled().
 */
function modules_checklist_modules_enabled($modules) {
  modules_checklist_notify($modules, 'enabled');

  $modules_data = system_rebuild_module_data();
  $status = modules_checklist_status_check($modules_data);

  if ($status['status'] != 'status') {
    drupal_set_message($status['message'], $status['status']);
  }
}

/**
 * Implements hook_modules_disabled().
 */
function modules_checklist_modules_disabled($modules) {
  modules_checklist_notify($modules, 'disabled');

  $modules_data = system_rebuild_module_data();
  $status = modules_checklist_status_check($modules_data);

  if ($status['status'] != 'status') {
    drupal_set_message($status['message'], $status['status']);
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function modules_checklist_modules_uninstalled($modules) {
  modules_checklist_notify($modules, 'uninstalled');
}

/**
 * Implements hook_mail().
 */
function modules_checklist_mail($key, &$message, $params) {
  if ($key == 'modules_checklist_notification') {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
  }
}

/**
 * Implements hook_form_alter().
 */
function modules_checklist_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'system_modules') {
    array_unshift($form['#submit'], 'modules_checklist_system_modules_submit');
  }
  elseif ($form_id == 'system_modules_uninstall') {
    array_unshift($form['#submit'], 'modules_checklist_system_modules_uninstall_confirm');
  }
}

/**
 * Submit callback for the 'system_modules' page.
 *
 * Warns if anyone is disabling required module.
 */
function modules_checklist_system_modules_submit($form, &$form_state) {
  $required_disabled_modules = array();
  $required_enabled_modules = array();
  $modules_data = system_rebuild_module_data();
  $required_modules = variable_get('modules_checklist_required_modules', array());

  if (!empty($form_state['values']['modules'])) {
    foreach ($form_state['values']['modules'] as $package) {
      foreach ($package as $module => $module_status) {
        if (in_array($module, $required_modules)) {
          $module_name = $modules_data[$module]->info['name'];
          $module_previous_status = (bool) $modules_data[$module]->status;
          $module_actual_status = (bool) $module_status['enable'];

          // Required disabled module has been enabled.
          if (!$module_previous_status && $module_actual_status) {
            $required_enabled_modules[] = $module_name;
          }

          // Required enabled module has been disabled.
          if ($module_previous_status && !$module_actual_status) {
            $required_disabled_modules[] = $module_name;
          }
        }
      }
    }
  }

  if (!empty($required_disabled_modules)) {
    $message = format_plural(count($required_disabled_modules),
      'Modules Checklist. Required module (!modules) has been disabled. Please !enable it or !exclude (requires "Configure Modules Checklist settings" permission) from the list of required modules.',
      'Modules Checklist. Required modules (!modules) have been disabled. Please !enable them or !exclude (requires "Configure Modules Checklist settings" permission) from the list of required modules.',
      array(
        '!modules' => implode(', ', $required_disabled_modules),
        '!exclude' => l(t('exclude'), 'admin/config/development/modules_checklist_settings'),
        '!enable' => l(t('enable'), 'admin/modules'),
      )
    );
    drupal_set_message($message, 'error');
  }

  if (!empty($required_enabled_modules)) {
    $message = format_plural(count($required_enabled_modules),
      'Modules Checklist. Required module (!modules) has been enabled.',
      'Modules Checklist. Required modules (!modules) has been enabled.',
      array('!modules' => implode(', ', $required_enabled_modules)));
    drupal_set_message($message, 'status');
  }
}

/**
 * Submit callback for the confirmation step of 'system_modules_uninstall' form.
 *
 * Warns if anyone is uninstalling required module.
 */
function modules_checklist_system_modules_uninstall_confirm($form, &$form_state) {
  $required_uninstalled_modules = array();
  $required_modules = variable_get('modules_checklist_required_modules', array());
  $modules_data = system_rebuild_module_data();

  foreach ($form_state['values']['uninstall'] as $module => $uninstall) {
    if ($uninstall) {
      if (in_array($module, $required_modules)) {
        $required_uninstalled_modules[] = $modules_data[$module]->info['name'];
      }
    }
  }

  if (empty($form['#confirmed'])) {
    if (!empty($required_uninstalled_modules)) {
      $message = format_plural(count($required_uninstalled_modules),
        'Modules Checklist. You are about to uninstall required module (!modules) and lose its current configuration completely. Please !enable it or !exclude (requires "Configure Modules Checklist settings" permission) from the list of required modules.',
        'Modules Checklist. You are about to uninstall required modules (!modules) and lose their current configuration completely. Please !enable them or !exclude (requires "Configure Modules Checklist settings" permission) from the list of required modules.',
        array(
          '!modules' => implode(', ', $required_uninstalled_modules),
          '!enable' => l(t('enable'), 'admin/modules'),
          '!exclude' => l(t('exclude'), 'admin/config/development/modules_checklist_settings'),
        )
      );
    }
  }
  else {
    if (!empty($required_uninstalled_modules)) {
      $message = format_plural(count($required_uninstalled_modules),
        'Modules Checklist. Required module (!modules) has been uninstalled. Please !enable it or !exclude (requires "Configure Modules Checklist settings" permission) from the list of required modules.',
        'Modules Checklist. Required modules (!modules) have been uninstalled. Please !enable them or !exclude (requires "Configure Modules Checklist settings" permission) from the list of required modules.',
        array(
          '!modules' => implode(', ', $required_uninstalled_modules),
          '!enable' => l(t('enable'), 'admin/modules'),
          '!exclude' => l(t('exclude'), 'admin/config/development/modules_checklist_settings'),
        )
      );
    }
  }

  if (!empty($message)) {
    drupal_set_message($message, 'error');
  }
}

/**
 * Sends email about any action on required module.
 *
 * @param array $modules
 * @param string $type
 */
function modules_checklist_notify($modules, $type) {
  $notification_settings = variable_get('modules_checklist_notification', modules_checklist_get_default_notification_settings());

  if ($notification_settings['enabled']) {
    $affected_modules = array();
    $required_modules = variable_get('modules_checklist_required_modules', array());
    $module_names = modules_checklist_map_module_names($modules);

    foreach ($module_names as $module_machine_name => $module_name) {
      if (in_array($module_machine_name, $required_modules)) {
        $affected_modules[] = $module_name;
      }
    }

    if (!empty($affected_modules)) {
      modules_checklist_send_mail($affected_modules, $type);
    }
  }
};

/**
 * Returns status information.
 *
 * @param array $modules_data
 *
 * @return array
 */
function modules_checklist_status_check($modules_data) {
  $config_exists = TRUE;
  $messages = array('<strong>Modules Checklist status check.</strong>');
  $error_messages = $messages;
  $message_status = 'status';

  $t = get_t();
  $config = modules_checklist_get_configuration();
  $config_path = conf_path() . '/settings.php';
  $available_modules = array_keys($modules_data);
  $enabled_modules = modules_checklist_get_enabled_modules($modules_data);

  // Checks if $conf variables (required and optional lists of modules) exist
  // in settings.php.
  if (!is_array($config['required_modules'])) {
    $config_exists = FALSE;
    $messages[] = "List of required modules wasn't found in !file. Please !configure the list of required modules.";
  }

  if (!is_array($config['optional_modules'])) {
    $config_exists = FALSE;
    $messages[] = "List of optional modules wasn't found in !file. Please !configure the list of optional modules.";
  }

  // The module isn't configured properly. Throw error immediately.
  if (!$config_exists) {
    return array(
      'status' => 'error',
      'message' => t(
        implode($messages, '<br />'), array(
          '!configure' => l($t('set up'), 'admin/config/development/modules_checklist_settings'),
          '!file' => $config_path,
        )
      ),
    );
  }

  // Checks if any require module has been removed from the file system.
  $non_existent_modules = array_diff($config['required_modules'], $available_modules);

  if (!empty($non_existent_modules)) {
    // Some required modules have been physically removed from the file system.
    $messages = array(
      'List of required modules in !file contains modules that no longer exist in the file system: %modules.',
      'Please !click on "!button" button to skip non-existent modules and refresh the configuration.',
      'Then add it to the !file',
    );
    $error_messages[] = t(
      implode($messages, '<br />'), array(
        '!file' => $config_path,
        '%modules' => implode(', ', $non_existent_modules),
        '!click' => l(t('click'), 'admin/config/development/modules_checklist_settings'),
        '!button' => t(MODULES_CHECKLIST_GENERATE_BUTTON_TEXT),
      )
    );
    $message_status = 'error';
  }

  // Checks if any required modules are disabled.
  $disabled_required_modules = array_diff($config['required_modules'], $enabled_modules);

  if (!empty($disabled_required_modules)) {
    $messages = array(
      'Required modules are disabled: %modules.',
      'Please !enable them or !exclude (requires "Configure Modules Checklist settings" permission) from the list of required modules in !file.',
    );
    $error_messages[] = t(
      implode($messages, '<br />'), array(
        '!file' => $config_path,
        '%modules' => implode(', ', array_values(modules_checklist_map_module_names($disabled_required_modules))),
        '!enable' => l(t('enable'), 'admin/modules'),
        '!exclude' => l(t('exclude'), 'admin/config/development/modules_checklist_settings'),
      )
    );
    $message_status = 'error';
  }

  // Checks if any module is enabled which doesn't belong
  // to the list of required or optional modules.
  $untracked_modules = array_diff($enabled_modules,
    array_merge($config['required_modules'], $config['optional_modules']));

  if (!empty($untracked_modules)) {
    $messages = array(
      'Some enabled modules should be !disabled: %modules.',
      'Alternatively they can be !added to the list of required modules or to the list of optional modules.',
    );
    $error_messages[] = t(
      implode($messages, '<br />'), array(
        '!file' => $config_path,
        '!disabled' => l(t('disabled'), 'admin/modules'),
        '!added' => l(t('added'), 'admin/config/development/modules_checklist_settings'),
        '%modules' => implode(', ', array_values(modules_checklist_map_module_names($untracked_modules))),
      )
    );
    // If no errors with higher priority found throw 'warning'.
    $message_status = $message_status != 'error' ? 'warning' : 'error';
  }

  if ($message_status != 'status') {
    return array(
      'status' => $message_status,
      'message' => implode($error_messages, '<br />'),
    );
  }

  // All is OK.
  $optional_modules = '';
  $messages[] = 'List of required modules was found in !file.';
  $messages[] = 'List of optional modules was found in !file.';

  if (!empty($config['optional_modules'])) {
    $messages[] = 'Optional modules are enabled: !modules.';
    $optional_modules = implode(', ', array_values(modules_checklist_map_module_names($config['optional_modules'])));
  }

  return array(
    'status' => 'status',
    'message' => t(
      implode($messages, '<br />'), array(
        '!file' => $config_path,
        '!modules' => $optional_modules,
      )
    ),
  );
}

/**
 * Returns module configuration defined in settings.php.
 *
 * @return array
 */
function modules_checklist_get_configuration() {
  return array(
    'required_modules' => variable_get('modules_checklist_required_modules'),
    'optional_modules' => variable_get('modules_checklist_optional_modules'),
  );
}

/**
 * Returns list of enabled modules.
 *
 * @param array $available_modules
 *
 * @return array
 */
function modules_checklist_get_enabled_modules($available_modules) {
  $enabled = array();

  foreach ($available_modules as $module_machine_name => $module_data) {
    if ($module_data->status) {
      $enabled[] = $module_machine_name;
    }
  }

  return $enabled;
}

/**
 * Returns array of names of the modules.
 *
 * @param array $modules
 *
 * @return array
 */
function modules_checklist_get_module_names($modules) {
  $module_names = array();
  $modules_data = system_rebuild_module_data();

  foreach ($modules as $module_machine_name) {
    if (isset($modules_data[$module_machine_name]->info['name'])) {
      $module_names[$module_machine_name] = $modules_data[$module_machine_name]->info['name'];
    }
    else {
      $module_names[$module_machine_name] = modules_checklist_get_uninstalled_and_deleted_label($module_machine_name);
    }
  }

  return $module_names;
}

/**
 * Returns label for the module that has been uninstalled and deleted from the system.
 *
 * @param string $module_machine_name
 *
 * @return string
 */
function modules_checklist_get_uninstalled_and_deleted_label($module_machine_name) {
  return $module_machine_name . ' [' . t('uninstalled and deleted') . ']';
}

/**
 * Returns array of module machine names mapped to module names.
 *
 * @param $modules
 *
 * @return array
 */
function modules_checklist_map_module_names($modules) {
  $module_names = array();
  $module_data = system_rebuild_module_data();

  foreach ($modules as $module_machine_name) {
    if (!empty($module_data[$module_machine_name]->info['name'])) {
      // Module exists in the file system.
      $module_names[$module_machine_name] = $module_data[$module_machine_name]->info['name'];
    }
    else {
      // Module was removed from the file system.
      $module_names[$module_machine_name] = $module_machine_name;
    }
  }

  return $module_names;
}

/**
 * Sends email regarding enabled/disabled required modules.
 *
 * @see modules_checklist_get_email_tokens().
 *
 * @param $modules
 * @param $type
 */
function modules_checklist_send_mail($modules, $type) {
  if (!empty($modules)) {
    $settings = variable_get('modules_checklist_notification', modules_checklist_get_default_notification_settings());
    $data = array(
      'modules_checklist' => array(
        'modules' => implode(', ', $modules),
        'action' => $type,
      ),
    );
    $params = array(
      'subject' => token_replace($settings['subject'], $data),
      'body' => array(token_replace($settings['body'], $data)),
    );

    drupal_mail('modules_checklist', 'modules_checklist_notification', $settings['to'], language_default(), $params, variable_get('site_mail', ini_get('sendmail_from')));
  }
}

/**
 * Returns default notification settings.
 *
 * @return array
 */
function modules_checklist_get_default_notification_settings() {
  $superadmin = user_load(1);

  $body = array(
    'Required modules ([modules_checklist:modules]) were [modules_checklist:action] by [current-user:name] ([current-user:mail], IP address [modules_checklist:ip_address]).',
    'Date: [modules_checklist:modules_checklist_date].',
    'More information on [modules_checklist:config_url].',
  );

  return array(
    'enabled' => 0,
    'to' => $superadmin->mail,
    'subject' => '[site:name]: Modules Checklist notification',
    'body' => implode("\r\n\r\n", $body),
  );
}

/**
 * Returns array of email tokens that module supports.
 *
 * @return array
 */
function modules_checklist_get_email_tokens() {
  return array(
    '[site:name]',
    '[current-user:name]',
    '[current-user:mail]',
    '[modules_checklist:ip_address]',
    '[modules_checklist:modules_checklist_date]',
    '[modules_checklist:modules]',
    '[modules_checklist:action]',
    '[modules_checklist:config_url]',
  );
}

/**
 * Renders table on the Modules Checklist settings page.
 *
 * @return string
 */
function theme_modules_checklist_table($variables) {
  $modules = $variables['form']['modules'];
  $header = array(
    t('$conf: required'),
    t('$conf: optional'),
    t('$conf: disabled'),
    t('module status'),
    t('module'),
  );

  $rows = array();

  foreach ($modules as $module_machine_name => $module_options) {
    if (is_array($module_options)) {
      $module_elements = element_children($module_options);
      $row = array();

      foreach ($module_elements as $value) {
        if (is_string($value)) {
          $row[] = drupal_render($modules[$module_machine_name][$value]);
        }
      }

      $rows[] = $row;
    }
  }

  return theme('table',
    array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array(
        'id' => array('modules_checklist_table'),
      ),
    )
  );
}
