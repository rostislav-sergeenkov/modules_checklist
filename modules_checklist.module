<?php

/**
 * @file
 * modules_checklist.module.
 */

// ==== RELEASE 7x-1.0. Focus on functionality.
// -- major functionality --
// @todo add email notification on required module actions and implement email validation. @see https://html-and-cms.com/blog/drupal/send-mail-form-submit-drupal-7-token-support
// @todo fix status check on the admin page and report page. Create one function for this purpose (modules_checklist_status_check()).
// @todo module can be: installed, enabled, disabled, uninstalled, physically removed. Test all 5 situations.
// @todo double check and then clean up all @todos.

// -- release action items ---
// @todo update README.txt file
// @todo implement hook_help() for both modules.
// @todo think how to specify correct version for the sub-module.
// @todo create Project Page and promote the module to the permanent d.org project.
// @todo install the module on Prod sites.

// Defines text on the "Generate" button.
define('MODULE_CHECKLIST_GENERATE_BUTTON_TEXT', 'Generate config');

/**
 * Implements hook_help().
 */
function modules_checklist_help($path, $arg) {

}

/**
 * Implements hook_theme().
 */
function modules_checklist_theme() {
  return array(
    'modules_checklist_table' => array(
      'render element' => 'form',
      'file' => 'modules_checklist.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function modules_checklist_permission() {
  return array(
    'configure modules_checklist settings' => array(
      'title' => t('Configure Modules Checklist settings'),
      'description' => t('Access and configure Modules Checklist settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function modules_checklist_menu() {
  return array(
    'admin/config/development/modules_checklist_settings' => array(
      'title' => 'Modules Checklist settings',
      'description' => 'Modules Checklist settings and configuration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('modules_checklist_settings_form'),
      'access arguments' => array('configure modules_checklist settings'),
      'file' => 'modules_checklist.admin.inc',
    )
  );
}

/**
 * Implements hook_init().
 */
function modules_checklist_init() {
  if (current_path() != 'admin/reports/status') {
    if (user_access('configure modules_checklist settings')) {
      $check_status = modules_checklist_status_check(system_rebuild_module_data(), conf_path() . '/settings.php');

      if (in_array($check_status['status'], array('warning', 'error'))) {
        $prefix = t('Please !configure Modules Checklist module.',
          array(
            '!configure' => l(t('configure'), 'admin/config/development/modules_checklist_settings'),
          )
        );
        $message = $prefix . '<br />' . $check_status['message'];
        drupal_set_message($message, $check_status['status'], FALSE);
      }
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function modules_checklist_modules_installed($modules) {
  $module_names = array_keys(modules_checklist_map_module_names($modules));

}

/**
 * Implements hook_modules_enabled().
 */
function modules_checklist_modules_enabled($modules) {
  $module_names = array_keys(modules_checklist_map_module_names($modules));

}

/**
 * Implements hook_modules_disabled().
 */
function modules_checklist_modules_disabled($modules) {
  $module_names = array_keys(modules_checklist_map_module_names($modules));
//  drupal_mail();
}

/**
 * Implements hook_modules_uninstalled().
 */
function modules_checklist_modules_uninstalled($modules) {
  $module_names = array_keys(modules_checklist_map_module_names($modules));

}

function modules_checklist_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'system_modules') {
    array_unshift($form['#submit'], 'modules_checklist_system_modules_submit');
  }
  elseif ($form_id == 'system_modules_uninstall') {
    array_unshift($form['#submit'], 'modules_checklist_system_modules_uninstall_confirm');
  }
}

/**
 * Submit callback for the 'system_modules' page.
 *
 * Warns if anyone is disabling required module.
 */
function modules_checklist_system_modules_submit($form, &$form_state) {
  $required_disabled_modules = array();
  $required_enabled_modules = array();
  $modules_data = system_rebuild_module_data();
  $required_modules = variable_get('modules_checklist_required_modules', array());

  foreach ($form_state['values']['modules'] as $package) {
    foreach ($package as $module => $module_status) {
      if (in_array($module, $required_modules)) {
        $module_name = $modules_data[$module]->info['name'];
        $module_previous_status = (bool) $modules_data[$module]->status;
        $module_actual_status = (bool) $module_status['enable'];

        // Required disabled module has been enabled.
        if (!$module_previous_status && $module_actual_status) {
          $required_enabled_modules[] = $module_name;
        }

        // Required enabled module has been disabled.
        if ($module_previous_status && !$module_actual_status) {
          $required_disabled_modules[] = $module_name;
        }
      }
    }
  }

  if (!empty($required_disabled_modules)) {
    $message = format_plural(count($required_disabled_modules),
      'Modules Checklist. Required module (!modules) was disabled. Please enable it or !exclude from the list of required modules.',
      'Modules Checklist. Required modules (!modules) were disabled. Please enable them or !exclude from the list of required modules.',
      array(
        '!modules' => implode(', ', $required_disabled_modules),
        '!exclude' => l(t('exclude'), 'admin/config/development/modules_checklist_settings'),
      )
    );
    drupal_set_message($message, 'error');
  }

  if (!empty($required_enabled_modules)) {
    $message = format_plural(count($required_enabled_modules),
      'Modules Checklist. Required module (!modules) was enabled.',
      'Modules Checklist. Required modules (!modules) were enabled.',
      array('!modules' => implode(', ', $required_enabled_modules)));
    drupal_set_message($message, 'status');
  }
}

/**
 * Submit callback for the confirmation phase of 'system_modules_uninstall' form.
 *
 * Warns if anyone is uninstalling required module.
 */
function modules_checklist_system_modules_uninstall_confirm($form, &$form_state) {
  $required_unistalled_modules = array();
  $modules_data = system_rebuild_module_data();

  foreach ($form_state['values']['uninstall'] as $module => $unistall) {
    if ($unistall) {
      $required_unistalled_modules[] = $modules_data[$module]->info['name'];
    }
  }

  if (empty($form['#confirmed'])) {
    if (!empty($required_unistalled_modules)) {
      $message = format_plural(count($required_unistalled_modules),
        'Modules Checklist. You are about to unistall required module (!modules) and lose its current configuration completely. Please enable it or !exclude from the list of required modules.',
        'Modules Checklist. You are about to unistall required modules (!modules) and lose their current configuration completely. Please enable them or !exclude from the list of required modules.',
        array(
          '!modules' => implode(', ', $required_unistalled_modules),
          '!exclude' => l(t('exclude'), 'admin/config/development/modules_checklist_settings'),
        )
      );
    }
  }
  else {
    if (!empty($required_unistalled_modules)) {
      $message = format_plural(count($required_unistalled_modules),
        'Modules Checklist. Required module (!modules) was unistalled. Please enable it or !exclude from the list of required modules.',
        'Modules Checklist. Required modules (!modules) were unistalled. Please enable them or !exclude from the list of required modules.',
        array(
          '!modules' => implode(', ', $required_unistalled_modules),
          '!exclude' => l(t('exclude'), 'admin/config/development/modules_checklist_settings'),
        )
      );
    }
  }

  if (!empty($message)) {
    drupal_set_message($message, 'error');
  }
}

/**
 * Submit callback for the submission phase of 'system_modules_uninstall' form.
 *
 * Warns if anyone is uninstalling required module.
 */
function modules_checklist_system_modules_uninstall_submit($form, &$form_state) {
  dpm($form_state['values']);
}

/**
 * Return status information.
 *
 * @param array $modules_data
 * @param string $config_path
 *
 * @return array
 */
function modules_checklist_status_check($modules_data, $config_path) {
  // @todo double check this function.
  $required_modules = variable_get('modules_checklist_required_modules');
  $optional_modules = variable_get('modules_checklist_optional_modules');
  $message = array('<strong>Modules Checklist status check.</strong>');

  if (is_array($required_modules)) {
    $non_existent_modules = array_diff($required_modules, array_keys($modules_data));

    if (empty($non_existent_modules)) {
      $message = array_merge($message, array(
        'List of required modules is set in !file file.',
      ));

      // Either all modules from the list are available in the system.
      return array(
        'status' => 'status',
        'message' => t(implode($message, '<br />'), array(
          '!file' => $config_path,
          )
        ),
      );
    }
    else {
      // Or some of them have been physically removed from the file system.
      $message = array_merge($message, array(
        'Your !file file contains modules that no longer exist in the system: %modules.',
        'Please click on "!button" button to skip non-existent modules and generate new list of modules.',
        'Then update $conf[\'modules_checklist_required_modules\'] in !file file.',
      ));

      return array(
        'status' => 'warning',
        'message' => t(implode($message, '<br />'), array(
            '!file' => $config_path,
            '%modules' => implode(', ', $non_existent_modules),
            '!button' => MODULE_CHECKLIST_GENERATE_BUTTON_TEXT,
          )
        ),
      );
    }
  }
  else {
    $message = array_merge($message, array(
      'Select modules you wish to track and click "!button" button.',
      'Then copy the message and paste it into !file file.',
      'The module detects the list of modules and starts tracking if they are enabled or disabled.',
    ));

    return array(
      'status' => 'error',
      'message' => t(implode($message, '<br />'), array(
        '!button' => MODULE_CHECKLIST_GENERATE_BUTTON_TEXT,
        '!file' => $config_path,
        )
      ),
    );
  }
}

/**
 * Returns array of missing required modules and enabled extra modules.
 *
 * Compares enabled modules with the predefined list of modules.
 *
 * @return array
 */
function modules_checklist_get_modules_status() {
  $status = array(
    'optional_modules' => array(),
    'missing_modules' => array(),
    'error_message' => '',
  );

  $required_modules = modules_checklist_get_modules('required');
  $enabled_modules = modules_checklist_get_modules('enabled');
  $config_path = conf_path() . '/settings.php';

  if (empty($required_modules)) {
    $status['error_message'] = t('Please add the list of required modules in !file.',
      array('!file' => $config_path));

    return $status;
  }

  // @todo update logic for optional modules.
  $status['optional_modules'] = array_diff($enabled_modules, $required_modules);
  $status['missing_modules'] = array_diff($required_modules, $enabled_modules);

  return $status;
}

/**
 * Returns array of names of the modules.
 *
 * @param array $modules
 *
 * @return array
 */
function modules_checklist_get_module_names($modules) {
  $module_names = array();
  $modules_data = system_rebuild_module_data();

  foreach ($modules as $module_machine_name) {
    if (isset($modules_data[$module_machine_name]->info['name'])) {
      $module_names[$module_machine_name] = $modules_data[$module_machine_name]->info['name'];
    }
    else {
      $module_names[$module_machine_name] = modules_checklist_get_uninstalled_and_deleted_label($module_machine_name);
    }
  }

  return $module_names;
}

/**
 * Returns array of human readable names of modules according to their status.
 *
 * @param string $status
 * @todo document possible $type
 *
 * @return array|null
 */
function modules_checklist_get_modules($status) {
  switch ($status) {
    case 'enabled':
      $modules = array_keys(module_list());
      break;
    case 'required':
      $modules = variable_get('modules_checklist_required_modules', array());
      break;
      // @todo implement logic for optional modules.
    case 'optional':
      $modules = variable_get('modules_checklist_optional_modules', array());
      break;
    default:
      $modules = array();
  }

  if (!empty($modules)) {
    sort($modules);

    return modules_checklist_get_module_names($modules);
  }

  return $modules;
}

/**
 * Returns label for the module that has been uninstalled and deleted from the system.
 *
 * @param string $module_machine_name
 *
 * @return string
 */
function modules_checklist_get_uninstalled_and_deleted_label($module_machine_name) {
  return $module_machine_name . ' [' . t('uninstalled and deleted') . ']';
}

/**
 * Returns array of module machine names mapped to module names.
 *
 * @param $modules
 *
 * @return array
 */
function modules_checklist_map_module_names($modules) {
  $module_names = array();
  $module_data = system_rebuild_module_data();

  foreach ($modules as $module_machine_name) {
    $module_names[$module_machine_name] = $module_data[$module_machine_name]->info['name'];
  }

  return $module_data;
}
