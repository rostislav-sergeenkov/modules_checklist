<?php

/**
 * @file
 * modules_checklist_log.module.
 */

// Defines the ststus of log rotation by default.
define('MODULES_CHECKLIST_LOG_DEFAULT_ROTATION_STATUS', 0);
// Defines number of days to keep log entries by default.
define('MODULES_CHECKLIST_LOG_DEFAULT_ROTATION_PERIOD', 7);
// Defines the name of the folder in file system for backups.
define('MODULES_CHECKLIST_LOG_BACKUP_DIR', 'public://modules_checklist_log_backup');
// Defines types of events that module records.
define('MODULES_CHECKLIST_LOG_TYPE_INSTALLED', 1);
define('MODULES_CHECKLIST_LOG_TYPE_ENABLED', 2);
define('MODULES_CHECKLIST_LOG_TYPE_DISABLED', 3);
define('MODULES_CHECKLIST_LOG_TYPE_UNINSTALLED', 4);

/**
 * Implements hook_help().
 */
function modules_checklist_log_help($path, $arg) {

}

/**
 * Implements hook_permission().
 */
function modules_checklist_log_permission() {
  return array(
    'access modules_checklist log' => array(
      'title' => t('View Modules Checklist log'),
      'description' => t('Access and view Modules Checklist log.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function modules_checklist_log_menu() {
  return array(
    'admin/reports/modules_checklist_log' => array(
      'title' => 'Modules Checklist log',
      'description' => 'Administration UI for browsing modules_checklist events.',
      'page callback' => 'modules_checklist_log_page',
      'access arguments' => array('access modules_checklist log'),
      'file' => 'modules_checklist_log.page.inc',
    )
  );
}

/**
 * Implements hook_cron().
 */
function modules_checklist_log_cron() {
  $rotation_status = variable_get('modules_checklist_log_rotation_enabled', MODULES_CHECKLIST_LOG_DEFAULT_ROTATION_STATUS);

  if ($rotation_status) {
    $rotation_period = variable_get('modules_checklist_log_rotation_period', MODULES_CHECKLIST_LOG_DEFAULT_ROTATION_PERIOD);

    if ($rotation_period) {
      $rotation_period = 86400 * $rotation_period;

      // Delete records which are older than {$rotation_period} days.
      db_delete('modules_checklist_log')
        ->condition('timestamp', REQUEST_TIME - $rotation_period, '<')
        ->execute();
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function modules_checklist_log_entity_info() {
  return array(
    'modules_checklist_log_entry' => array(
      'label' => t('Modules Checklist log entry'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'modules_checklist_log',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
      ),
      'module' => 'modules_checklist_log',
    ),
  );
}

/**
 * Implements hook_entity_property_info().
 */
function modules_checklist_log_entity_property_info() {
  $properties = array(
    'id' => array(
      'type'  => 'integer',
      'label' => t('Log entry ID'),
      'description' => t('Unique log entry ID.'),
      'schema field' => 'id',
    ),
    'module_name' => array(
      'type'  => 'text',
      'label' => t('Module Name'),
      'description' => t('The machine name of the module.'),
      'schema field' => 'module_name',
    ),
    'uid' => array(
      'type'  => 'integer',
      'label' => t('UID'),
      'description' => t('The ID of the user who triggered the event.'),
      'schema field' => 'uid',
    ),
    'ip' => array(
      'type' => 'text',
      'label' => t('IP address'),
      'description' => 'IP address of the user who triggered the event.',
      'schema field' => 'ip',
    ),
    'type' => array(
      'type'  => 'integer',
      'label' => t('Status'),
      'description' => t('The type of the event (status of the module).'),
      'schema field' => 'type',
    ),
    'timestamp' => array(
      'type' => 'date',
      'label' => t('Timestamp'),
      'description' => t('Unix timestamp of when event occurred.'),
      'schema field' => 'timestamp',
    ),
  );

  $info['modules_checklist_log_entry']['properties'] = $properties;

  return $info;
}

/**
 * Implements hook_views_api().
 */
function modules_checklist_log_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_views_data_alter().
 */
function modules_checklist_log_views_data_alter(&$data) {
  // @todo implement Views field handler in v.7x-1.1 instead.
  $data['modules_checklist_log']['type']['field']['handler'] = 'views_handler_field';
  unset($data['modules_checklist_log']['type']['field']['float']);

  // Exposes uid as a relationship to users.
  $data['modules_checklist_log']['author_info'] = array(
    'title' => t('User information.'),
    'help' => t('Information related to user who triggered the event.'),
    'relationship' => array(
      'base' => 'users',
      'base field' => 'uid',
      'relationship field' => 'uid',
      'handler' => 'views_handler_relationship',
      'label' => t('User information.'),
    ),
  );
}

/**
 * Implements hook_modules_installed().
 */
function modules_checklist_log_modules_installed($modules) {
  foreach ($modules as $module) {
    modules_checklist_log_save(array('module_name' => $module, 'type' => MODULES_CHECKLIST_LOG_TYPE_INSTALLED));
  }
}

/**
 * Implements hook_modules_enabled().
 */
function modules_checklist_log_modules_enabled($modules) {
  foreach ($modules as $module) {
    modules_checklist_log_save(array('module_name' => $module, 'type' => MODULES_CHECKLIST_LOG_TYPE_ENABLED));
  }
}

/**
 * Implements hook_modules_disabled().
 */
function modules_checklist_log_modules_disabled($modules) {
  foreach ($modules as $module) {
    modules_checklist_log_save(array('module_name' => $module, 'type' => MODULES_CHECKLIST_LOG_TYPE_DISABLED));
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function modules_checklist_log_modules_uninstalled($modules) {
  foreach ($modules as $module) {
    modules_checklist_log_save(array('module_name' => $module, 'type' => MODULES_CHECKLIST_LOG_TYPE_UNINSTALLED));
  }
}

/**
 * Implements hook_views_pre_render().
 */
function modules_checklist_log_views_pre_render(&$view) {
  if ($view->name == 'modules_checklist_log') {
    $modules_data = system_rebuild_module_data();

    foreach($view->result as $delta => $row) {
      $module_machine_name = $row->modules_checklist_log_module_name;

      if (isset($modules_data[$module_machine_name]->info['name'])) {
        $view->result[$delta]->modules_checklist_log_module_name = $modules_data[$module_machine_name]->info['name'] . ' [' . $module_machine_name . ']';
      }
      else {
        $view->result[$delta]->modules_checklist_log_module_name = modules_checklist_get_uninstalled_and_deleted_label($module_machine_name);
      }

      $view->result[$delta]->modules_checklist_log_type = modules_checklist_log_get_type_label($view->result[$delta]->modules_checklist_log_type);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function modules_checklist_log_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    if ($form_state['view']->name == 'modules_checklist_log') {
      // Transforms Views default module_name text field to the user-friendly select list.
      $form['module_name']['#type'] = 'select';
      $form['module_name']['#options'] = modules_checklist_log_get_module_names();
      $form['module_name']['#empty_option'] = ' - ' . t('None') . ' - ';
      $form['module_name']['#empty_value'] = '';
      unset($form['module_name']['#size']);

      // Transforms Views default status text field to the user-friendly select list.
      $form['type']['#type'] = 'select';
      $form['type']['#options'] = modules_checklist_log_get_types();
      $form['type']['#empty_option'] = ' - ' . t('None') . ' - ';
      $form['type']['#empty_value'] = '';
      unset($form['type']['#size']);

      // Transforms Views default uid text field to the user-friendly select list.
      $form['uid']['#type'] = 'select';
      $form['uid']['#options'] = modules_checklist_log_get_usernames();
      $form['uid']['#empty_option'] = ' - ' . t('None') . ' - ';
      $form['uid']['#empty_value'] = '';
      unset($form['uid']['#autocomplete_path']);
      unset($form['uid']['#description']);

      // Transforms Views default IP text field to the user-friendly select list.
      $form['ip']['#type'] = 'select';
      $form['ip']['#options'] = modules_checklist_log_get_ip();
      $form['ip']['#empty_option'] = ' - ' . t('None') . ' - ';
      $form['ip']['#empty_value'] = '';
      unset($form['ip']['#size']);

      $form['#attached']['css'][] = drupal_get_path('module', 'modules_checklist_log') . '/modules_checklist_log.css';
    }
  }
  else if ($form_id == 'modules_checklist_settings_form') {
    $form['modules_checklist_log_rotation_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable log rotation'),
      '#description' => t('Removes the log entries from the database. Relies on cron run.'),
      '#default_value' => variable_get('modules_checklist_log_rotation_enabled', MODULES_CHECKLIST_LOG_DEFAULT_ROTATION_STATUS),
    );

    $form['modules_checklist_log_rotation_period'] = array(
      '#type' => 'textfield',
      '#title' => t('How long should log entries be kept?'),
      '#description' => t('How many days to keep log entries.'),
      '#element_validate' => array('element_validate_integer_positive'),
      '#default_value' => variable_get('modules_checklist_log_rotation_period', MODULES_CHECKLIST_LOG_DEFAULT_ROTATION_PERIOD),
      '#states' => array(
        'visible' => array(
          ':input[name=modules_checklist_log_rotation_enabled]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * Saves modules_checklist_log_entry entity to the specified storages.
 *
 * @param array $log_item
 * @param array $storages
 *   Supports storage: db, variable, file.
 */
function modules_checklist_log_save($log_item, $storage = array('db')) {
  global $user;

  $log_entry = array(
    'module_name' => !empty($log_item['module_name']) ? $log_item['module_name'] : '',
    'uid' => !empty($log_item['uid']) ? $log_item['uid'] : $user->uid,
    'ip' => !empty($log_item['ip']) ? $log_item['ip'] : $user->hostname,
    'type' => !empty($log_item['type']) ? $log_item['type'] : '',
    'timestamp' => !empty($log_item['timestamp']) ? $log_item['timestamp'] : REQUEST_TIME,
  );

  foreach ($storage as $storage_type) {
    switch ($storage_type) {
      case 'db':
        $modules_checklist_log_entry = entity_create('modules_checklist_log_entry', $log_entry);
        entity_save('modules_checklist_log_entry', $modules_checklist_log_entry);
        break;
      case 'variable':
        variable_set('modules_checklist_log_status_' . $log_entry['type'], $log_entry);
        break;
      case 'file':
        $backup_dir = MODULES_CHECKLIST_LOG_BACKUP_DIR;

        if (file_prepare_directory($backup_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
          $filename = 'modules_checklist_log_status_' . $log_entry['type'];
          $file_path = $backup_dir . '/' . $filename;
          file_unmanaged_save_data(serialize($log_entry), $file_path, FILE_EXISTS_REPLACE);
        }
        break;
    }
  }
}

/**
 * Returns array of unique modules from the Module Checklist log.
 *
 * @return array
 */
function modules_checklist_log_get_module_names() {
  $module_names = array();
  $modules_data = system_rebuild_module_data();
  $result = db_query('SELECT DISTINCT(mcl.module_name) FROM {modules_checklist_log} mcl ORDER BY mcl.module_name')->fetchAll();

  foreach ($result as $item) {
    if (isset($modules_data[$item->module_name])) {
      $module_names[$item->module_name] = $modules_data[$item->module_name]->info['name'];
    }
    else {
      $module_names[$item->module_name] = modules_checklist_get_uninstalled_and_deleted_label($item->module_name);
    }
  }

  return $module_names;
}

/**
 * Returns array of unique types from the Module Checklist log.
 *
 * @return array
 */
function modules_checklist_log_get_types() {
  $types = array();
  $result = db_query('SELECT DISTINCT(mcl.type) FROM {modules_checklist_log} mcl ORDER BY mcl.type')->fetchAll();

  foreach ($result as $item) {
    $type_label = modules_checklist_log_get_type_label($item->type);

    if (!empty($type_label)) {
      $types[$item->type] = $type_label;
    }
  }

  return $types;
}

/**
 * Returns array of unique types from the Module Checklist log.
 *
 * @return array
 */
function modules_checklist_log_get_ip() {
  $types = array();
  $result = db_query('SELECT DISTINCT(mcl.ip) FROM {modules_checklist_log} mcl ORDER BY mcl.ip')->fetchAll();

  foreach ($result as $item) {
    $types[$item->ip] = $item->ip;
  }

  return $types;
}

/**
 * Returns array of unique usernames from the Module Checklist log.
 *
 * @return array
 */
function modules_checklist_log_get_usernames() {
  $users = array();

  $query = db_select('modules_checklist_log', 'mcl');
  $query->leftJoin('users', 'u', 'mcl.uid = u.uid');
  $query->fields('u', array('uid', 'name'));

  $result = $query->execute()->fetchAll();

  foreach ($result as $item) {
    $users[$item->uid] = $item->name;
  }

  return $users;
}

/**
 * Return human readable label for the event of the given type.
 *
 * @param int $type
 *
 * @return string
 */
function modules_checklist_log_get_type_label($type) {
  switch ($type) {
    case MODULES_CHECKLIST_LOG_TYPE_INSTALLED:
      $label = t('installed');
      break;
    case MODULES_CHECKLIST_LOG_TYPE_ENABLED:
      $label = t('enabled');
      break;
    case MODULES_CHECKLIST_LOG_TYPE_DISABLED:
      $label = t('disabled');
      break;
    case MODULES_CHECKLIST_LOG_TYPE_UNINSTALLED:
      $label = t('uninstalled');
      break;
    default:
      // Unknown module status.
      $label = '';
  }

  return $label;
}

/**
 * Returns the content of the backup file.
 *
 * @param $path
 *
 * @return array
 */
function modules_checklist_log_get_backup_file_content($path) {
  $disabled_descriptor = fopen($path, 'r');
  $result = fread($disabled_descriptor, filesize($path));
  fclose($disabled_descriptor);

  return unserialize($result);
}
