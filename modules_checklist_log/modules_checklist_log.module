<?php

/**
 * @file
 * modules_checklist_log.module.
 */

// Defines types of events that module records.
define('MODULES_CHECKLIST_LOG_TYPE_INSTALLED', 1);
define('MODULES_CHECKLIST_LOG_TYPE_ENABLED', 2);
define('MODULES_CHECKLIST_LOG_TYPE_DISABLED', 3);
define('MODULES_CHECKLIST_LOG_TYPE_UNINSTALLED', 4);

/**
 * Implements hook_help().
 */
function modules_checklist_log_help($path, $arg) {

}

/**
 * Implements hook_entity_info().
 */
function modules_checklist_log_entity_info() {
  return array(
    'modules_checklist_log_entry' => array(
      'label' => t('Modules Checklist Log Entry'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'modules_checklist_log',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
      ),
      'module' => 'modules_checklist_log',
    ),
  );
}

/**
 * Implements hook_entity_property_info().
 */
function modules_checklist_log_entity_property_info() {
  $properties = array(
    'id' => array(
      'type'  => 'integer',
      'label' => t('Log entry ID'),
      'description' => t('Unique log entry ID.'),
      'schema field' => 'id',
    ),
    'module_name' => array(
      'type'  => 'text',
      'label' => t('Module Name'),
      'description' => t('The machine name of the module.'),
      'schema field' => 'module_name',
    ),
    'uid' => array(
      'type'  => 'integer',
      'label' => t('UID'),
      'description' => t('The ID of the user who triggered the event.'),
      'schema field' => 'uid',
    ),
    'type' => array(
      'type'  => 'integer',
      'label' => t('Type'),
      'description' => t('The type of the event.'),
      'schema field' => 'type',
    ),
    'timestamp' => array(
      'type' => 'date',
      'label' => t('Timestamp'),
      'description' => t('Unix timestamp of when event occurred.'),
      'schema field' => 'timestamp',
    ),
  );

  $info['modules_checklist_log_entry']['properties'] = $properties;

  return $info;
}

/**
 * Implements hook_views_data_alter().
 */
function modules_checklist_log_views_data_alter(&$data) {
  // Exposes uid as a relationship to users.
  $data['modules_checklist_log']['author_info'] = array(
    'title' => t('User information.'),
    'help' => t('Information related to user who triggered the event.'),
    'relationship' => array(
      'base' => 'users',
      'base field' => 'uid',
      'relationship field' => 'uid',
      'handler' => 'views_handler_relationship',
      'label' => t('User information.'),
    ),
  );
}

/**
 * Implements hook_modules_installed().
 */
function modules_checklist_log_modules_installed($modules) {
  foreach ($modules as $module) {
    modules_checklist_log_save($module, MODULES_CHECKLIST_LOG_TYPE_INSTALLED);
  }
}

/**
 * Implements hook_modules_enabled().
 */
function modules_checklist_log_modules_enabled($modules) {
  foreach ($modules as $module) {
    modules_checklist_log_save($module, MODULES_CHECKLIST_LOG_TYPE_ENABLED);
  }
}

/**
 * Implements hook_modules_disabled().
 */
function modules_checklist_log_modules_disabled($modules) {
  foreach ($modules as $module) {
    modules_checklist_log_save($module, MODULES_CHECKLIST_LOG_TYPE_DISABLED);
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function modules_checklist_log_modules_uninstalled($modules) {
  foreach ($modules as $module) {
    modules_checklist_log_save($module, MODULES_CHECKLIST_LOG_TYPE_UNINSTALLED);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function modules_checklist_log_views_pre_render(&$view) {
  if ($view->name == 'modules_checklist_log') {
    $modules_data = system_rebuild_module_data();

    foreach($view->result as $delta => $row) {
      $module_machine_name = $row->modules_checklist_log_module_name;

      if (isset($modules_data[$module_machine_name]->info['name'])) {
        $view->result[$delta]->modules_checklist_log_module_name = $modules_data[$module_machine_name]->info['name'];
      }
      else {
        $view->result[$delta]->modules_checklist_log_module_name = $module_machine_name . ' [' . t('uninstall') . ']';
      }

      // @todo incorrect value is rendered - int instead of string.
      $view->result[$delta]->modules_checklist_log_type = modules_checklist_log_get_type_label($view->result[$delta]->modules_checklist_log_type);
    }
  }
}

/**
 * Saves modules_checklist_log_entry entity to the DB.
 *
 * @param $module_name
 * @param $type
 */
function modules_checklist_log_save($module_name, $type) {
  global $user;

  $modules_checklist_log_entry = entity_create(
    'modules_checklist_log_entry', array(
      'module_name' => $module_name,
      'uid' => $user->uid,
      'type' => $type,
      'timestamp' => REQUEST_TIME,
    )
  );
  entity_save('modules_checklist_log_entry', $modules_checklist_log_entry);
}

/**
 * Returns array of unique modules from the Module Checklist log.
 *
 * @return array
 */
function modules_checklist_log_get_module_names() {
  $module_names = array();
  $modules_data = system_rebuild_module_data();
  $result = db_query('SELECT DISTINCT(mcl.module_name) FROM {modules_checklist_log} mcl ORDER BY mcl.module_name')->fetchAll();

  foreach ($result as $item) {
    $module_names[$item->module_name] = $modules_data[$item->module_name]->info['name'];
  }

  return $module_names;
}

/**
 * Returns array of unique types from the Module Checklist log.
 *
 * @return array
 */
function modules_checklist_log_get_types() {
  $types = array();
  $result = db_query('SELECT DISTINCT(mcl.type) FROM {modules_checklist_log} mcl ORDER BY mcl.type')->fetchAll();

  foreach ($result as $item) {
    $type_label = modules_checklist_log_get_type_label($item->type);

    if (!empty($type_label)) {
      $types[$item->type] = $type_label;
    }
  }

  return $types;
}

/**
 * Returns array of unique usernames from the Module Checklist log.
 *
 * @return array
 */
function modules_checklist_log_get_usernames() {
  $users = array();

  $query = db_select('modules_checklist_log', 'mcl');
  $query->leftJoin('users', 'u', 'mcl.uid = u.uid');
  $query->fields('u', array('uid', 'name'));

  $result = $query->execute()->fetchAll();

  foreach ($result as $item) {
    $users[$item->uid] = $item->name;
  }

  return $users;
}

/**
 * Return human readable label for the event of the given type.
 *
 * @param int $type
 *
 * @return string
 */
function modules_checklist_log_get_type_label($type) {
  switch ($type) {
    case MODULES_CHECKLIST_LOG_TYPE_INSTALLED:
      $label = t('installed');
      break;
    case MODULES_CHECKLIST_LOG_TYPE_ENABLED:
      $label = t('enabled');
      break;
    case MODULES_CHECKLIST_LOG_TYPE_DISABLED:
      $label = t('disabled');
      break;
    case MODULES_CHECKLIST_LOG_TYPE_UNINSTALLED:
      $label = t('uninstalled');
      break;
    default:
      // Unknown type.
      $label = '';
  }

  return $label;
}
